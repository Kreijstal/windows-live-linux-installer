#########################################################################################
#                                                                                       #
#   Author - Dave Pickens ( drummerdp@users.sourceforge.net )                           #
#                                                                                       #
#########################################################################################
#
#   grub2win-standard-functions        **************************************************
#
#   These standard functions are included in the grub.cfg file via the following command
# 	source $prefix/g2bootmgr/gnugrub.functions.cfg
#
# ***************************************************************************************
#
#
# The getpartition function searches for a partition.
#
# If the first paramater is 'label' it searches for a partition with the label name
# passed in the second parameter. 
# If the first paramater is 'uuid'  it searches for a partition with the uuid
# passed in the second parameter.
# Otherwise it searches for a file with the filename passed in the second parameter. 
# The third parameter is either "root" or "boot" or "set".
# It then sets the appropriate "root" or "boot" variable to prepare for startup. 
# If the third parameter is 'set' the fourth paramater is the name of a variable. 
# It then sets the this named variable to prepare for startup. 
# 
#
function getpartition {
    set pager=0
    set searchtype=$1
    set partsearch=$2
    set partstyle=$3
    set partvariable=$4
    set syntaxmsg='\ngetpartition syntax is:\n\n\t\ \ \  Search Type\t\ \ \ \ Search Argument\t\ Partition Style\n\t<file|label|uuid>\ \ <search argument>\ \ <root|boot|set [name]>\n'
    set examplmsg1='\n\n\t\ examples:\t getpartition label ubuntu-19.10 root'
    set examplmsg2='\n\n\t\t\t          getpartition label fedora-20.0  set fedboot\n'
    if [ -z $3 ] ; then 
        echo
        echo -e $syntaxmsg
        echo -e $examplmsg1
        echo -e $examplmsg2
	g2werror 'Getpartition syntax error - All 3 parameters are required'
    fi
    if [ $searchtype = label -o $searchtype = file -o $searchtype = uuid ] ; then true; else echo -e $syntaxmsg ; g2werror 'Getpartition - invalid search type' $searchtype ; fi
    if [ $partstyle = root -o $partstyle = boot -o $partstyle = set ] ;      then true; else echo -e $syntaxmsg ; g2werror 'Getpartition - invalid partition style' $partstyle ; fi
    if        [ $searchtype = label ] ; then search.fs_label $partsearch addressfound 
         elif [ $searchtype = file ] ;  then search.file     $partsearch addressfound 
         elif [ $searchtype = uuid ] ;  then search.fs_uuid  $partsearch addressfound 
         else echo -e $syntaxmsg ; g2werror 'Getpartition - invalid search type' $searchtype
    fi
    if [ $? = 0 ] ; then
         if [ $partstyle = root ] ; then set root=($addressfound) ; else set boot=($addressfound) ; fi 
         if [ $partstyle = set ]  ; then set   $4=($addressfound) ; else set partvariable='' ; fi 
         else g2werror 'Grub did not find a' $partstyle 'partition with' $searchtype $partsearch
    fi
    echo
    echo Grub is setting $partstyle $partvariable to $addressfound
    echo The $partstyle $partvariable partition $searchtype is $partsearch
    echo
}      
#
# The savelast function saves the last booted entry  ********************************
# to the GNU Grub grubenv file
#
function savelast {
    set      default=$1
    save_env default
    if [ $grub2win_bootlast = yes ] ; then
         set grub2win_chosen=$default'  -   '"'$2'"
    fi
    save_env grub2win_chosen
    if [ ! -z $subdefault ] ; then set default=$subdefault ; fi
}
#
# The g2wsetprefix function displays sets up the pathprefix and   ***********************
# subvolparm variables to prepare for boot from Btrfs partitions  ***********************
#
function g2wsetprefix {
    unset pathprefix
    unset subvolparm
    if [ -d '/@' ] ; then
        set pathprefix=/@
        set subvolparm='rootflags=subvol=@'
        echo ; echo Btrfs Subvol Support Is Active ; echo
    fi
    if [ -f $pathprefix'/boot/vmlinuz' -a -z $1 ] ; then set pathprefix=$pathprefix'/boot' ; fi
    echo ; if [ ! -z $pathprefix ] ; then echo The Path Prefix = $pathprefix ; fi ; echo 
}
#
# The g2wbootinfo function invokes the bootinfo utilities   ***************************
#
function g2wbootinfo {
    export gfxmode
    export grub2part
    export grub2win_chosen 
    export grub2win_lastbooted
    export grub2win_version
    export grub2win_procbits
    export grub2win_efibits
    export grub2win_bootmode
    export grub2win_efiboot
    export grub2win_efilevel
    configfile $prefix/g2bootmgr/gnugrub.bootinfo.cfg
}
#
# The grubinfo function shows GNU Grub information, variables and boot mode   *****************
#
function grubinfo {
    clear
    set pager=0
    echo
    echo '*************  GNU Grub Information  *************'
    echo
    echo
    echo -n "System clock time is "
    date
    echo
    echo -n "Grub2Win "
    if [ ! -z $grub2win_version ] ; then echo -n Version $grub2win_version " " ; fi
    echo "- The PC CPU is " $grub2win_procbits bit - The firmware type is $grub2win_bootmode
    echo
    if [ -z $grub2part ] ; then
        if [ $grub2win_bootmode = EFI ] ; then echo ; echo Grub2Win is running from the EFI partition ; echo ; fi
    else
    	echo
    	echo -e Grub2Win is running from $prefix "\nThe partition info for " $grub2part follows:
    	echo
    	ls   $grub2part
    fi
    echo
    echo
    echo The Grub command path is	$cmdpath
    echo
    if [ $grub2win_bootmode = EFI ]; then
       echo Info for the EFI partition $efipart follows:
       ls $efipart
       echo
       echo The GNU Grub EFI boot file is	   $grub2win_efiboot   for $grub2win_efibits bit EFI firmware
    else
       echo The GNU Grub BIOS boot file is	   $prefix/g2bootmgr/gnugrub.kernel.bios
       echo
    fi
    echo
    echo
    if [ ! -z $gfxmode ] ; then echo The Grub graphics mode is $gfxmode ; echo ; fi
    if [ ! -z $grub2win_chosen ] ; then 
	echo The default boot menu entry is $grub2win_chosen "      Last OS autoboot =" $grub2win_lastbooted
    fi
    set pager=1
    echo 
    echo
}
# ************************************************************************************
#
#  The g2wisoboot function checks the variables needed to boot from an ISO file
#  It then sets up and performs the boot
#
function g2wisoboot {
    if [ -z $1 ]  ; then echo ; fi
    echo 'Starting g2wisoboot'
    if [ -z $1 ]  ; then echo ; fi
    set  checkit=ok
    if [ -z $isopath ];    then echo '** Variable isopath    is not set **'; unset checkit; else echo 'Variable isopath    is set to '$isopath;    fi
    if [ -z $1 ]  ; then echo ; fi
    if [ -z $kernelpath ]; then echo '** Variable kernelpath is not set **'; unset checkit; else echo 'Variable kernelpath is set to '$kernelpath; fi
    if [ -z $1 ]  ; then echo ; fi
    if [ -z $initrdpath ]; then echo '** Variable initrdpath is not set **'; unset checkit; else echo 'Variable initrdpath is set to '$initrdpath; fi
    if [ -z $1 ]  ; then echo ; fi
    if [ -z $bootparms ];  then echo '** Variable bootparms  is not set **'; unset checkit; else echo 'Variable bootparms  is set to '$bootparms;  fi
    if [ -z $1 ]  ; then echo ; echo; fi
    if [ ! -z $checkit ] ; then 
          getpartition file $isopath root
          loopback loop ($root)$isopath
          test -f (loop)$kernelpath
          if [ ! $? = 0 ] ; then echo; echo *** The kernel file $kernelpath was not found in the loopback filesystem; unset checkit; fi
          set kernelpath=(loop)$kernelpath
          set initrdall=''
          for initrdfile in $initrdpath; do
                test -f (loop)$initrdfile
         	if [ ! $? = 0 ] ; then echo; echo *** The initrd file $initrdfile was not found in the loopback filesystem; unset checkit; fi
                set initrdall="$initrdall "(loop)$initrdfile
          done
    fi
    if [ ! -z $checkit ] ; then
          echo
          echo 'Linux will boot from ' ($root)$isopath
          echo
          linux  $kernelpath $bootparms
          initrd $initrdall
          if [ ! -z $reviewpause ] ; then g2wsleep $reviewpause; fi
          echo
          echo 'GNU Grub Is Now booting Linux'
    else
          g2werror 'The diagnostic checks failed. Aborting the g2wisoboot function.'
    fi
}
#
#
# The g2werror function displays any error messages  ***********************************
#
function g2werror {
    echo
    echo
    echo *** $1 $2 $3 $4 $5 $6 $7 $8 $9
    echo
    echo
    g2wsleep 120
}
# ************************************************************************************
#
#  g2wsleep is an enhanced sleep command with an option to return to the main menu
#
function g2wsleep  {
    reviewhold=$reviewpause
    if [ ! -z $1 ]        ; then reviewpause=$1 ; fi
    if [ -z $reviewpause] ; then return ; fi
    echo
    echo                            'Press and release the ESC key quickly to skip the countdown'
    if keystatus ; then echo ; echo 'Hold down the SHIFT key two seconds to pause for more options' ; fi
    echo
    echo -n Countdown to load " " ; sleep -i -v $reviewpause
    sleep 1
    keystatus --shift
    keyresp=$?
    if [ $keyresp -eq 0 ] ; then 
        echo
        echo
        echo -e '\tEnter "r" to return to the Grub2Win boot menu'
        echo -e '\t\t\tor'
        echo -e '\tEnter "c" to continue'
        echo
        while true ; do
            utilread sleepresp r c
            if [ ! -z $sleepresp ] ; then 
                if [ $sleepresp = r ] ; then
                    echo ; echo ; echo Returning to the main Grub2Win boot menu ; echo
	            sleep 1 ; configfile $prefix/grub.cfg ; break ; fi
                if [ $sleepresp = c ] ; then echo ; break ; fi
            fi
        done
    fi
    reviewpause=$reviewhold ; unset reviewhold
    echo 
}
# ************************************************************************************
#
#  g2wutil is the utility function for shutdown, reboot and boot to firmware setup
#
function g2wutil {
    clear
    set pager=1
    echo
    if [ $1 = halt    ] ; then echo GNU Grub is shutting down your machine                         ; fi
    if [ $1 = reboot  ] ; then echo GNU Grub is now rebooting your machine                         ; fi
    if [ $1 = fwsetup ] ; then echo GNU Grub is now booting to your machine"'"s EFI firmware setup ; fi
    echo
    if [ ! -z $reviewpause ] ; then sleep -v -i $reviewpause ; echo ; fi
    $1
    # If the function fails, display an error message
    g2werror 'The Grub ' $1 ' command is not supported by your firmware'
}
# ************************************************************************************
#
#  g2wbits gets the processor bitmode, EFI firmware bitmode and EFI or BIOS setting
#
function g2wbits {
    set grub2win_procbits=32
    if [ cpuid -l ]             ; then set grub2win_procbits=64  ; fi
    set grub2win_efibits=32
    if [ $grub_cpu = x86_64 ]   ; then set grub2win_efibits=64   ; fi
    set grub2win_bootmode=BIOS
    if [ $grub_platform = efi ] ; then set grub2win_bootmode=EFI ; else unset grub2win_efibits ; fi 
}

function utilread {
    set utilpagersave=$pager ; set pager=0 ; unset utilinput
    echo
    echo -n "Enter your selection " ; read utilinput
    if [ -z $utilinput ] ; then 
       set utilinput=null 
       if [ $2 != null -a $3 != none ] ; then echo ; echo -n "** No Input Try Again " ; sleep 1 ; fi
       elif [   $2  = any ]                     ; then true
       elif [ ! $2  = ' ' -a $utilinput = $2 ]  ; then true
       elif [ ! $3  = ' ' -a $utilinput = $3 ]  ; then true
       elif [ ! $4  = ' ' -a $utilinput = $4 ]  ; then true
       elif [ ! $5  = ' ' -a $utilinput = $5 ]  ; then true
       elif [ ! $6  = ' ' -a $utilinput = $6 ]  ; then true
       elif [ ! $7  = ' ' -a $utilinput = $7 ]  ; then true
       elif [ ! $8  = ' ' -a $utilinput = $8 ]  ; then true
       elif [ ! $9  = ' ' -a $utilinput = $9 ]  ; then true
       elif [ ! $10 = ' ' -a $utilinput = $10 ] ; then true
       elif [ ! $11 = ' ' -a $utilinput = $11 ] ; then true
       elif [ ! $12 = ' ' -a $utilinput = $12 ] ; then true
       elif [ ! $13 = ' ' -a $utilinput = $13 ] ; then true
       elif [ ! $14 = ' ' -a $utilinput = $14 ] ; then true
       elif [ ! $15 = ' ' -a $utilinput = $15 ] ; then true
       else 
           echo ; echo "** Invalid Input Try Again "
           unset utilinput
           sleep 1
    fi
    set utilcommand="set $1=$utilinput"
    eval $utilcommand
    set pager=$utilpagersave ; unset utilpagersave ; unset utilcommand ; unset utilinput    
}

function utilpauseit {
    set utilpausemsg="Press Enter to continue"
    if [ ! -z $1 ] ; then set utilpausemsg="$1" ; fi
    echo ; echo $utilpausemsg ; echo ; unset utilpausemsg
    read 
}

function utilendit {
    set pager=1
    echo
    echo ** Press enter to return to the Boot Information and Utilities menu
    read
    clear
}

#
set grub2win_funcstatus=set
#
# end grub2win-standard-functions        ********************************************
