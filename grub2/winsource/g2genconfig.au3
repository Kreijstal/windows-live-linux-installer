#include-once
#include  <g2common.au3>

Func GenConfig()
	;_ArrayDisplay ($selectionarray)
	TimeGetGenDate    ()
	CommonSelArraySync ("yes")
	EFICheckClover     ()
	DirRemove          ($custconfigs, 1)
	$gcthemename = CommonThemeGetOption ("name")
	$gctimemsg1  = "Includes GNU Grub version " & SettingsGet ($setgnugrubversion) & "     "
	$gctimemsg2  = "The GNU Grub timeout is "   & $timeoutgrub & " seconds"
	$gctimemsg3  = "  The Windows timeout is "  & $timeoutwin  & " seconds"
	If $timegrubenabled = "no" Then $gctimemsg2 = "The Grub timeout is not set."
	If $timewinenabled  = "no" Then $gctimemsg3 = "  The Windows timeout is disabled."
	CommonWriteLog ("          " & "Updating the " & $configstring & " file")
	Dim $configarray[1]
	;_ArrayDisplay ($userarray)
	_ArrayAdd($configarray, "#")
	_ArrayAdd($configarray, "#                 DO NOT EDIT THIS FILE!!")
	_ArrayAdd($configarray, "#")
	_ArrayAdd($configarray, "# It is automatically generated by " & $masterexe)
	_ArrayAdd($configarray, "# using templates from             " & $sourcepath)
	_ArrayAdd($configarray, "# and settings from                " & $custconfigs)
	_ArrayAdd($configarray, "# and user section code from       " & $usersectionfile)
	_ArrayAdd($configarray, "#")
	_ArrayAdd($configarray, "#       Created on " & TimeLine ("", "", "yes"))
	_ArrayAdd($configarray, "#")
	_ArrayAdd($configarray, "# "            & $progvermessage)
	_ArrayAdd($configarray, "# Gen Stamp"   &_StringRepeat (" ", 33) & $genstampdisp)
	_ArrayAdd($configarray, "#")
	_ArrayAdd($configarray, "# The grub menu theme is - " & BaseFuncCapIt ($gcthemename))
	_ArrayAdd($configarray, "#")
	_ArrayAdd($configarray, "#")
	$genline = BaseFuncSing ($selectionautocount, "Grub2Win generated " & BaseFuncPadLeft ($selectionautocount, 2) & " menu entries")
	If FileGetSize ($usersectionfile) > 0 Then $genline &= "     The user section was preserved"
	_ArrayAdd($configarray, "#  " & $genline)
	_ArrayAdd($configarray, "#  " & $gctimemsg1 & $gctimemsg2 & $gctimemsg3)
	_ArrayAdd($configarray, "#")
	If Not StringInStr($graphset, "auto") Then $graphset &= ",auto"
	If $graphset =  "auto" Then $graphset = $graphconfigauto
	If $graphset = $autostring Then $graphset = $graphconfigauto
	If $usergraphset <> "" Then $graphset = $usergraphset & ",auto"
	_ArrayAdd($configarray, "#  The current Windows display resolution is   " & $graphsize)
	If $gcthemename <> $notheme Then _ArrayAdd ($configarray, "#  Grub resolution will be set at boot time to " & $graphset)
	_ArrayAdd($configarray, "#  The Grub default boot OS is menu entry " & $defaultset)
	If $langauto = "" Then $langfullselector = LangGetFullSelector ($langselectedcode)
	_ArrayAdd($configarray, "#  The Grub locale language is " & $langfullselector & "   The locale code is - " & $langselectedcode)
	_ArrayAdd($configarray, "#")
	_ArrayAdd($configarray, "")
	_ArrayAdd($configarray, "")
	If $defaultlastbooted = "yes" Then
		_ArrayAdd($configarray, "load_env default")
		_ArrayAdd($configarray, "load_env grub2win_chosen")
	Else
		_ArrayAdd($configarray, "set default=" & $defaultos)
		_ArrayAdd($configarray, "set grub2win_chosen=" & "'" & $defaultset & "'")
	EndIf
	_ArrayAdd($configarray, "set grub2win_version=" & $basrelcurr)
	If $langauto = "yes" Then
		_ArrayAdd($configarray, "set grub2win_langauto=yes")
		$langselectedcode = $langcode
	EndIf
	_ArrayAdd($configarray, "load_env grub2win_reboot")
	_ArrayAdd($configarray, "if [ ! $grub2win_reboot = no ] ; then set default=$grub2win_reboot" & _
	                        " ; set grub2win_reboot=no ; save_env grub2win_reboot ; fi")
	If $timegrubenabled = "yes" Then
		_ArrayAdd($configarray, "set timeout=" & $timeoutgrub)
	Else
		_ArrayAdd($configarray, "unset timeout")
	EndIf
	_ArrayAdd($configarray, "set lang=" & $langselectedcode)
	CommonAddFileToArray ($sourcepath & $templatesetparms, $configarray)
	_ArrayAdd($configarray, "set grub2win_custmode=" & $firmwaremode)
	_ArrayAdd($configarray, "set grub2win_lastbooted=" & $defaultlastbooted)
	If $firmwaremode = "EFI" Then
		_ArrayAdd($configarray, "set grub2win_efilevel=" & $efileveldeployed)
		If $winefiuuid <> "" Then _ArrayAdd($configarray, "set grub2win_efiuuid=" & $winefiuuid)
	EndIf
	If $gcthemename = $notheme Then
        _ArrayAdd ($configarray,"set color_normal=white/black")
		_ArrayAdd ($configarray,"set color_highlight=white/black")
		_ArrayAdd ($configarray,"set menu_color_normal=light-gray/black")
	Else
		_ArrayAdd ($configarray, "set gfxmode=" & $graphset)
		UtilEnvDelete ($envgfxmode)
		CommonAddFileToArray ($sourcepath & $templatetheme,   $configarray)
		If FileExists ($usergfxcmdfile) Then CommonAddFileToArray ($usergfxcmdfile, $configarray)
		CommonAddFileToArray ($sourcepath & $templategfxmenu, $configarray, "yes")
	EndIf
	CommonWriteLog ("              The Grub default OS is menu entry " & $defaultset)
	CommonWriteLog ("              The Grub language is " & $langfullselector & "  Locale code - " & $langselectedcode)
	$selectionlimit = UBound($selectionarray) - 1
	_ArrayAdd($autoarray, "# start-grub2win-auto-menu-section  " & _StringRepeat("*", 51))
	_ArrayAdd($autoarray, "#")
	For $gcsub = 0 To $selectionlimit
		If $selectionarray [$gcsub] [$sOSType] = "clover" And $cloverload = "Failed" Then ContinueLoop
		If $selectionarray [$gcsub] [$sAutoUser] = "user" Then ContinueLoop
        GenMenuHeader ($gcsub,  $autoarray, "yes")
		GenGetOSFields ($gcsub, $autoarray, "normal")
		If $selectionarray [$gcsub] [$sLoadBy] <> $modecustom Then GenMenuFooter ($gcsub, $autoarray)
	Next
	CommonWriteLog ("              Graphics theme - " & BaseFuncCapIt (CommonThemeGetOption ("name")))
	CommonWriteLog ("              Graphics mode  - " & $graphset)
	CommonWriteLog ("              " & $genline)
	CommonWriteLog ("              " & $gctimemsg1 & $gctimemsg2)
	_ArrayAdd ($autoarray, "")
	_ArrayAdd ($autoarray, "#")
	_ArrayAdd ($autoarray, "# end-grub2win-auto-menu-section     " & _StringRepeat("*", 51))
	_ArrayAdd ($autoarray, "#")
	_ArrayAdd ($autoarray, "#")
	_ArrayAdd ($autoarray, "#")
	_ArrayAdd ($autoarray, "# The following user section code is generated from file " & $usersectionfile)
	_ArrayAdd ($autoarray, "#")
	_ArrayConcatenate ($configarray, $autoarray)
	$userarray = BaseFuncArrayRead ($usersectionfile, "GenConfig")
	_ArrayAdd    ($userarray, "#")
	_ArrayAdd    ($userarray, $usersectionend)
	_ArrayInsert ($userarray, 0, "#")
	_ArrayInsert ($userarray, 0, $usersectionstart)
	If StringStripWS (FileRead ($usersectionfile), 8) <> "" Then _ArrayConcatenate ($configarray, $userarray)
	BaseFuncArrayWrite($configfile, $configarray)
	If @error Then
		CommonWriteLog("                *** Update of the " & $configfile & " file failed ***")
		Return 1
	EndIf
EndFunc

Func GenMenuHeader ($mfsub, ByRef $mfmenuarray, $mfcomment = "")
	$mfctitleraw = $selectionarray [$mfsub] [$sEntryTitle]
	$mfctitlehot = "Hotkey="   & $selectionarray [$mfsub] [$sHotkey]
	$mfchotkey   = "--hotkey=" & $selectionarray [$mfsub] [$sHotkey]
	$mfskipmenu  = ""
	If $mfcomment <> "" And ($selectionarray [$mfsub] [$sClass] = "custom" Or _
	    $selectionarray [$mfsub] [$sClass] = "isoboot"                     Or _
		$selectionarray [$mfsub] [$sClass] = "submenu") Then $mfskipmenu = "yes"
	If $selectionarray [$mfsub] [$sHotkey] = "no" Then
		$mfctitlehot  = _StringRepeat (" ",  8)
		$mfchotkey    = _StringRepeat (" ", 10)
	EndIf
	$mftitle = BaseFuncPadRight ($mfctitleraw, 56) & $mfctitlehot
	If StringLen ($mfctitleraw) > 50 Then $mftitle = BaseFuncPadRight ($mfctitleraw, 80)
	$mfmenutype = "menuentry   '"
	$mfmenudesc = "  Menu Entry "
	$mflbracket = "  {"
	If $selectionarray [$mfsub] [$sOSType] =  "submenu" Then
		$mfmenutype    = "submenu     '"
		$mfmenudesc    = "  SubMenu Entry "
	EndIf
	If $mfskipmenu <> "" Then
		$mfmenutype    = "# Menu Comment '"
		$mfmenudesc    = "  Menu Entry For Custom Code "
		$mftitle       = BaseFuncPadRight ($mfctitleraw, 53) & $mfctitlehot
		$mflbracket    = ""
	EndIf
	_ArrayAdd ($mfmenuarray, "")
	_ArrayAdd ($mfmenuarray, "#")
	_ArrayAdd ($mfmenuarray, "#" & $mfmenudesc & $mfsub & "       " & $selectionarray[$mfsub][$sEntryTitle])
	_ArrayAdd ($mfmenuarray, "#")
	If $mfsub = $defaultos And $defaultlastbooted = "no" Then
		_ArrayAdd ($mfmenuarray, "#  ** Grub will boot this entry by default **")
		_ArrayAdd ($mfmenuarray, "#")
	EndIf
	$mfmenurec  = $mfmenutype & $mftitle & "'"
	$mfclass    = $selectionarray[$mfsub][$sClass]
	If $usericonscheck <> "" Then GenCheckIcon ($mfsub)
	$mfclassrec = "--class " & $mfclass & "   --class " & $selectionarray [$mfsub] [$sIcon]
	$mfmenurec &= "   " & $mfchotkey & "    " & $mfclassrec & $mflbracket
	_ArrayAdd ($mfmenuarray, $mfmenurec)
	If $mfskipmenu <> "" Then Return
	If $selectionarray [$mfsub] [$sReviewPause] > 0 Then
		_ArrayAdd ($mfmenuarray, "     set reviewpause=" & $selectionarray [$mfsub] [$sReviewPause])
		If $selectionarray [$mfsub] [$sFamily] <> "standfunc" Or $selectionarray [$mfsub] [$sOSType] = "clover" Then
			If $selectionarray [$mfsub] [$sAutoUser] = "auto" And $selectionarray [$mfsub] [$sOSType] <> "windows" Then _
				_ArrayAdd ($mfmenuarray, "     echo GNU Grub is preparing to boot  " & $selectionarray [$mfsub] [$sEntryTitle])
		EndIf
	EndIf
	If $selectionarray [$mfsub] [$sGraphMode]  <> $graphnotset Then _ArrayAdd ($mfmenuarray, "     set gfxpayload="  & $selectionarray [$mfsub] [$sGraphMode])
EndFunc

Func GenMenuFooter ($mfsub, ByRef $mfarray)
	If $selectionarray [$mfsub] [$sFamily] <> "standfunc" Or $selectionarray [$mfsub] [$sOSType] = "clover" Then _
		_ArrayAdd ($mfarray, "     savelast " & $mfsub &     " '" & $selectionarray [$mfsub] [$sEntryTitle] & "'")
	_ArrayAdd ($mfarray, "}")
	_ArrayAdd ($mfarray, "")
EndFunc

Func GenGetOSFields ($gofsub, ByRef $gofarray, $gofnormsamp = "normal")
	Local $goflinux, $gofmisca, $gofmiscb, $gofinitrd, $gofkernel, $gofremix, $gofroot
	If $selectionarray[$gofsub][$sLoadBy] = $modechaindisk Then
		$gofchainstring = "set root='" & "(hd" & $selectionarray[$gofsub][$sChainDrive] & ")'"
	EndIf
	$goftype         = $selectionarray [$gofsub] [$sOSType]
	If $goftype      = $modecustom Then $selectionarray [$gofsub] [$sLoadBy] = $modecustom
	$goffamily       = $selectionarray [$gofsub] [$sFamily]
	$gofparm         = $selectionarray [$gofsub] [$sBootParm]
	$gofsampleloadby = $selectionarray [$gofsub] [$sSampleLoadBy]
	$gofpause        = $selectionarray [$gofsub] [$sReviewPause]
	If $gofnormsamp  = "normal" Then $gofsampleloadby = ""
	Select
		Case $goffamily = "windows"
			CommonAddFileToArray ($sourcepath & $templatewinauto, $gofarray)
			Return
		Case $goftype   = "invaders"
			CommonAddFileToArray ($sourcepath & $templateinvaders, $gofarray)
			Return
		Case $goftype   = "clover"
			CommonAddFileToArray ($sourcepath & $templateclover, $gofarray)
			Return
		Case $selectionarray[$gofsub][$sLoadBy] = $modecustom And $gofnormsamp = "normal"
			CustomGenCode ($gofsub)
			Return
		Case $selectionarray[$gofsub][$sLoadBy] = $modechaindisk
			_ArrayAdd($gofarray, "     " & $gofchainstring)
			If $gofpause > 0 Then _ArrayAdd ($gofarray, "     g2wsleep")
			_ArrayAdd($gofarray, "     chainloader +1")
			Return
		Case $selectionarray[$gofsub][$sLoadBy] = $modechainfile
			$gofchainfile  = $selectionarray [$gofsub] [$sRootSearchArg]
			$gofchaincheck = $selectionarray [$gofsub] [$sFileLoadCheck]
			If $gofchaincheck <> "" Then $gofchainfile &= "    # " & $gofchaincheck
			_ArrayAdd ($gofarray, "     set chainbootmgr=" & $gofchainfile)
			_ArrayAdd ($gofarray, "     getpartition  file  $chainbootmgr  root")
			If $gofpause > 0 Then _ArrayAdd ($gofarray, "     g2wsleep")
			_ArrayAdd ($gofarray, "     chainloader $chainbootmgr")
			Return
		Case $goffamily = "linux-debian" Or $goffamily= "linux-ubuntu" Or $goffamily= "linux-mint"
			$goflinux  = "linux   /vmlinuz"
			$gofinitrd = "initrd  /initrd.img"
		Case $goffamily = "linux-suse"
			$goflinux  = "linux   /vmlinuz"
			$gofinitrd = "initrd  /initrd"
		Case $goffamily = "linux-fedora"
			$kernelwarn = "yes"
			$goflinux  = "linux   /vmlinuz"
			$gofinitrd = "initrd  /initramfs.img"
		Case $goffamily = "linux-slack"
			$goflinux  = "linux   /vmlinuz"
			$gofinitrd = "initrd  /initrd.gz"
		Case $goffamily = "linux-manjaro"
			$kernelwarn = "yes"
			$goflinux  = "linux   /vmlinuz"
			$gofmisca  = "if [ -f $pathprefix/amd-ucode.img ]   ; then set ucode=/amd-ucode.img   ; fi"
			$gofmiscb  = "if [ -f $pathprefix/intel-ucode.img ] ; then set ucode=/intel-ucode.img ; fi"
			$gofinitrd = "initrd  /$ucode  /initramfs.img"
		Case $selectionarray[$gofsub][$sOSType] = "android" Or $selectionarray[$gofsub][$sOSType] = "phoenix"
			$gofkernel = "linux  $kernelfile   "
			$gofinitrd  = "initrd $kerneldir/initrd.img"
		Case $goffamily = "standfunc"
			 $selectionarray [$gofsub] [$sLoadBy] = "Direct Load"
			 $gofloc = _ArraySearch ($osparmarray, $goftype)
			 _ArrayAdd ($gofarray, "     " &  $osparmarray [$gofloc] [$pUtilCommand])
			Return
		Case Else
			Return
	EndSelect
	If $selectionarray [$gofsub] [$sLoadBy] = $modehardaddress Or $gofsampleloadby = $modehardaddress  Then
		$gofroot = "root=" & CommonConvDevAddr ($selectionarray[$gofsub] [$sRootDisk])
		$gofstring = "     set root=" & CommonConvDevAddr ($selectionarray[$gofsub] [$sRootDisk], "hd")
		_ArrayAdd($gofarray, $gofstring)
		If $selectionarray[$gofsub][$sLayout] = $layoutboth Then
			$gofstring = "     set boot=" & CommonConvDevAddr ($selectionarray[$gofsub] [$sBootDisk], "hd")
			_ArrayAdd($gofarray, $gofstring)
		EndIf
	ElseIf $selectionarray[$gofsub][$sLoadBy] = $modepartlabel Or $gofsampleloadby = $modepartlabel Then
		$gofroot = "root=LABEL=$rootlabel"
		_ArrayAdd($gofarray, "     set rootlabel='" & CommonGetSearch ($selectionarray [$gofsub] [$sRootDisk], "Label") & "'")
		_ArrayAdd($gofarray, "     getpartition  label  $rootlabel  root")
		If $selectionarray[$gofsub][$sLayout] = $layoutboth Then
			_ArrayAdd($gofarray, "     set bootlabel='" & CommonGetSearch ($selectionarray [$gofsub] [$sBootDisk], "Label") & "'")
			_ArrayAdd($gofarray, "     getpartition  label  $bootlabel  boot")
			_ArrayAdd($gofarray, "     set root=$boot")
		EndIf
	ElseIf $selectionarray[$gofsub][$sLoadBy] = $modepartuuid Or $gofsampleloadby = $modepartuuid Then
		$gofroot = "root=UUID=$rootuuid"
		_ArrayAdd($gofarray, "     set rootuuid=" & StringLower (CommonGetSearch ($selectionarray [$gofsub] [$sRootDisk], "UUID")))
		_ArrayAdd($gofarray, "     getpartition  uuid  $rootuuid  root")
		If $selectionarray[$gofsub][$sLayout] = $layoutboth Then
			_ArrayAdd($gofarray, "     set bootuuid=" & StringLower (CommonGetSearch ($selectionarray [$gofsub] [$sBootDisk], "UUID")))
			_ArrayAdd($gofarray, "     getpartition  uuid  $bootuuid  boot")
			_ArrayAdd($gofarray, "     set root=$boot")
		EndIf
	ElseIf $selectionarray[$gofsub][$sLoadBy] = $modeandroidfile Or $selectionarray[$gofsub][$sLoadBy] = $modephoenixfile Then
		$gofanddir    = ""
		$gofanddisab  = ""
		$gofandkernel = $selectionarray [$gofsub] [$sRootSearchArg]
		If $selectionarray [$gofsub] [$sFileLoadCheck] = $fileloaddisable Then $gofanddisab = "    # " & $fileloaddisable
		$gofandsplit = StringSplit ($gofandkernel, "/")
		If Not @error Then
			$gofanddir = StringReplace ($gofandkernel, $gofandsplit [Ubound ($gofandsplit) - 1], "")
			_ArrayAdd($gofarray, "     set kerneldir="  & StringTrimRight ($gofanddir, 1))
			_ArrayAdd($gofarray, "     set kernelfile=$kerneldir/" & $gofandsplit [Ubound ($gofandsplit) - 1] & $gofanddisab)
			_ArrayAdd($gofarray, "     getpartition  file  $kernelfile  root")
		EndIf
	Else
		_ArrayAdd($gofarray, "     set rootfile=" & $selectionarray[$gofsub][$sRootSearchArg])
		_ArrayAdd($gofarray, "     getpartition  file  $rootfile  root")
	EndIf
	If StringInStr ($gofparm, $nullparm) Then $gofparm = ""
	$gofparm = StringReplace ($gofparm, "$subvolparm", "")
	_ArrayAdd($gofarray, "     g2wsetprefix")
	$goflinux  = StringReplace ($goflinux,  "linux   /", "linux   $pathprefix/")
	$gofinitrd = StringReplace ($gofinitrd, " /",        " $pathprefix/")
	If $selectionarray [$gofsub] [$sRootFilesystem] = "BTRFS" Then $gofparm &= " $subvolparm"
	If $gofpause > 0 And Not StringInStr ($selectionarray[$gofsub][$sOSType], "windows") And _
	   $selectionarray[$gofsub][$sLoadBy] <> $modecustom And $gofnormsamp = "normal" Then
	    _ArrayAdd($gofarray, "     echo Boot disk address is  $root")
		_ArrayAdd($gofarray, "     echo The boot mode is      " & $selectionarray[$gofsub][$sLoadBy])
		_ArrayAdd($gofarray, "     g2wsleep")
	EndIf
	If $goflinux   <> "" Then _ArrayAdd($gofarray, "     " & $goflinux   & "    " & $gofroot & "    " & $gofparm)
	If $gofkernel  <> "" Then _ArrayAdd($gofarray, "     " & $gofkernel  & "    " & $gofparm)
	If $gofremix   <> "" Then _ArrayAdd($gofarray, "     " & $gofremix            & $gofparm)
	If $gofmisca   <> "" Then _ArrayAdd($gofarray, "     " & $gofmisca)
	If $gofmiscb   <> "" Then _ArrayAdd($gofarray, "     " & $gofmiscb)
	If $gofinitrd  <> "" Then _ArrayAdd($gofarray, "     " & $gofinitrd)
	_ArrayAdd ($gofarray, "     if [ $? -ne 0 ] ; then g2werror Linux load error ; fi")
	;_ArrayDisplay ($gofarray)
EndFunc

Func GenRebootBuild ($rbentry = 0)
	;MsgBox ($mbontop, "Default " & $defaultset, $rbentry)
	Local $rbmsg, $rberror, $rbquery
	$rbvalue = UtilEnvGet ($envparmreboot)
	Select
		Case $defaultset = $lastbooted
			$rberror = "Not allowed when default is the last booted OS"
			;GenEnvWrite ($rbdata, "no")
			UtilEnvPut ($envparmreboot, "no", "yes")
		Case $rbentry = "query"
			$rbentry = $rbvalue
			$rbquery = "yes"
		Case $rbentry = "no"
		Case Not StringIsDigit ($rbentry) Or $rbentry > Ubound ($selectionarray) - 1
			$rberror = "The menu entry number is invalid - " & $rbentry
		Case $selectionarray [$rbentry] [$sDefaultOS] = "DefaultOS"
			$rberror = "Menu entry " & $rbentry & " is already the default"
	EndSelect
    If $rberror <> "" Then
		CommonWriteLog (@CR & "    ** Reboot Error **  " & $rberror)
		MsgBox ($mbwarnok, "Reboot Error", "** " & $rberror & " **", 60)
		CommonEndIt ("Failed", "no", "", "")
	EndIf
	If $rbentry = "no" Then
		$rbmsg  = "The next reboot has been disabled"
	Else
		$rbdisp = StringFormat ("%d", $rbentry)
		$rbmsg = "The next reboot is set to menu entry  " & $rbdisp & "  " & $selectionarray [$rbentry] [$sEntryTitle]
	EndIf
	CommonWriteLog (@CR & "    ** Reboot **  " & $rbmsg)
	MsgBox ($mbinfook, "Reboot", $rbmsg & @CR & @CR & @CR & "This message will close in 10 seconds - Or click OK", 10)
	If $rbquery =  "yes" Then Exit
	If $rbentry <> "no"  Then $rbentry = StringFormat ("%04d", $rbentry)
	;GenEnvWrite   ($rbdata, $rbentry)
	UtilEnvPut ($envparmreboot, $rbentry, "yes")
	$eficfgbefore = ""
	CommonEndIt ("Success", "no", "", "")
EndFunc

Func GenCheckIcon ($cisub)
	$cinamein  = $selectionarray [$cisub] [$sIcon]
	$cinameout = $cinamein
	$cinamein  = StringReplace ($cinamein, "user-", "")
	$cinamein  = StringReplace ($cinamein, "icon-", "")
	If FileExists ($iconpath & "\icon-"      & $cinamein & ".png") Then $cinameout = "icon-"      & $cinamein
	If FileExists ($iconpath & "\user-icon-" & $cinamein & ".png") Then $cinameout = "user-icon-" & $cinamein
	; MsgBox ($mbontop, "Icon ", "In    = " & $selectionarray [$cisub] [$sIcon] & @CR & @CR & "Out = " & $cinameout)
	$selectionarray [$cisub] [$sIcon] = $cinameout
EndFunc