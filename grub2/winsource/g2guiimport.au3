#include-once
#include  <g2common.au3>

If StringInStr (@ScriptName, "g2guiimport") Then
	Dim $selectionarray [0] [$selectionfieldcount + 1]
	DirCreate ($custconfigstemp)
	EditPanelStackArray ()
	ImportRunGUI        ()
	DirRemove           ($windowstempgrub, 1)
EndIf
;MsgBox ($mbontop, "Done", "", 1)

Func ImportRunGUI ()
	$importfilepath    = ImportGetFile ()
	If $importfilepath = "" Then Return
	$rgfilearray   = BaseFuncArrayRead ($importfilepath, "InportRunGUI")
	Dim $importarray [0] [$selectionfieldcount + 1]
	Dim $importwork  [0] [$selectionfieldcount + 1]
	Dim $importcode  [0] [2]
	$rglimit      = Ubound ($rgfilearray) - 1
	$rgitemnumber = 0
	$rgbrackcount = 0
	$rglinarg     = ""
	For $rgsub = 0 To $rglimit
		$rgrecord = StringReplace ($rgfilearray [$rgsub], '"', "'")
		$rgrecord = StringReplace ($rgrecord, "linuxefi",  "linux")
		$rgrecord = StringReplace ($rgrecord, "initrdefi", "initrd")
		If StringInStr ($rgrecord, "Generated by Grub2Win") Then ExitLoop
		$rgrecordnohash = GetPrevCleanRecord ($rgrecord, "yes")
		If StringInStr ($rgrecordnohash, "submenu") Then ContinueLoop
		If StringInStr ($rgrecordnohash, "{") Then $rgbrackcount += 1
		If StringInStr ($rgrecordnohash, "}") Then $rgbrackcount -= 1
		If $importtype = "Linux" Then
			If StringLeft  ($rgrecordnohash, 6) = "search" Then $rglinfind = ImportParseSearch ($rgrecordnohash, $rglinarg)
			Select
				Case GetPrevCheckMenu ($rgrecordnohash) Or $rgsub = $rglimit
					If Ubound ($importwork) > 0 And $importwork [0] [$sKernelName] <> "" Then
						_ArrayConcatenate ($importarray, $importwork)
						$rgitemnumber += 1
						;_ArrayDisplay     ($importcode)
					EndIf
					Dim $importwork [0] [$selectionfieldcount + 1]
					$rgbrackcount = 0
					;MsgBox ($mbontop, "Menu", $rgrecord & @CR & @CR & $parseresult1)
					_ArrayAdd ($importwork, "|" & $parseresult1 & "|" & StringLower ($modecustom) & "||" & $modecustom)
					$importwork [0] [$sGraphMode] = $graphnotset
					$importwork [0] [$sIcon] = "icon-imported"
				Case Ubound ($importwork) = 0
				Case CommonPrevParse ($rgrecordnohash, "linux") Or CommonPrevParse ($rgrecordnohash, "linux16")
					$rgrecord = ImportParseLinux ($rgrecordnohash, $rglinfind)
					$importwork [0] [$sClass]         = "custom"
					$importwork [0] [$sBootDisk]      = $rglinfind
					$importwork [0] [$sRootSearchArg] = $rglinarg
					$importwork [0] [$sBootParm]      = GetPrevBootParm ()
					$importwork [0] [$sKernelName]    = $parseresult1
					ImportSetRoot ($rgrecord, $rglinfind)
					If $rgbrackcount = 0 Then _ArrayAdd ($importcode, $rgitemnumber & "|" & $rgrecord)
				Case CommonPrevParse ($rgrecordnohash, "initrd")
					$importwork [0] [$sInitrdName] = $parseresult1
					If $rgbrackcount = 0 Then _ArrayAdd ($importcode, $rgitemnumber & "|" & $rgrecord)
				Case CommonPrevParse ($rgrecordnohash, "set", 1)
					If CommonParseStrip ($parseresult1, "gfxpayload=") Then _
						$importwork [0] [$sGraphMode] = $parmstripped
			EndSelect
		Else
			Select
				Case GetPrevCheckMenu ($rgrecordnohash) Or $rgsub = $rglimit
					If Ubound ($importwork) > 0 Then
						_ArrayConcatenate ($importarray, $importwork)
						$rgitemnumber += 1
						;_ArrayDisplay     ($importcode)
					EndIf
					Dim $importwork [0] [$selectionfieldcount + 1]
					$rgbrackcount             = 0
					_ArrayAdd ($importwork, "|" & $parseresult1 & "|" & StringLower ($modecustom) & "||" & $modecustom)
					$importwork [0] [$sClass] = "custom"
					If StringInStr ($rgrecordnohash, "brunch") Then
						$importwork [0] [$sEntryTitle] = "Chrome"
						$importwork [0] [$sIcon]       = "icon-chrome"
					EndIf
					If StringInStr ($rgrecordnohash, "brunch-settings") Then
						$importwork [0] [$sEntryTitle] = "Brunch Settings"
						$importwork [0] [$sIcon]       = "icon-brunch"
					EndIf
				Case Ubound ($importwork) = 0
				Case CommonPrevParse ($rgrecordnohash, "linux")
					$importwork [0] [$sClass]      = "custom"
					$importwork [0] [$sBootParm]   = GetPrevBootParm ()
					$importwork [0] [$sKernelName] = $parseresult1
					If $rgbrackcount = 0 Then _ArrayAdd ($importcode, $rgitemnumber & "|" & $rgrecord)
				Case Else
					If $rgbrackcount = 0 Then _ArrayAdd ($importcode, $rgitemnumber & "|" & $rgrecord)
			EndSelect
		EndIf
	Next
	;_ArrayDisplay ($importarray, "ImportArray")
	;_ArrayDisplay ($importcode,  "ImportCode")
	CommonBackStep (5, $importtype & ".grub", "cfg", $usermiscimport, $usermiscimport)
	FileCopy       ($importfilepath, $usermiscimport & "\" & $importtype & ".grub.cfg", 9)
	If Ubound ($importarray) = 0 Then
		$rgnotfound = "    No suitable import code was found in file" & @CR & @CR & "    " & $importfilepath & @CR
		CommonWriteLog ($rgnotfound)
		$rgrc = MsgBox ($mbinfoyesno, "** Import Error **", $rgnotfound & @CR & @CR & '    Click "Yes" for help')
		If $rgrc = $IDYES Then CommonHelp ("Importing Linux Config Files")
		Return
	EndIf
	If $edithandlegui <> "" Then WinSetState ($edithandlegui, "", @SW_MINIMIZE)
	ImportSetup ()
	While 1
		$rgstatusarray = GUIGetMsg (1)
		$rghandle      = $rgstatusarray[1]
		If $rghandle <> $handleimportgui And $rghandle <> $handleimportscroll And $rghandle <> $handleimportbottom Then ContinueLoop
		$rgstatus = $rgstatusarray [0]
		Select
			Case $rgstatus = $buttonimportcancel
				MsgBox ($mbontop, "Cancel", "", 1)
				ExitLoop
			Case $rgstatus = $buttonimport
				$rgapplyrc = ImportCheck ()
				If $rgapplyrc Then ContinueLoop
				ImportApply ()
				ExitLoop
			Case $rgstatus = "" Or $rgstatus < 1
				ContinueLoop
			Case $rgstatus = $importhelphandle
				CommonHelp ("Importing Linux and Chrome Config Files")
				ContinueLoop
		EndSelect
	WEnd
	BaseFuncGUIDelete   ($handleimportgui)
	BaseFuncGUIDelete   ($edithandlegui)
	If $handleselectiongui <> "" Then WinSetState ($handleselectiongui, "", @SW_RESTORE)
EndFunc

Func ImportSetup ()
	BaseFuncGUIDelete  ($handleimportgui)
	BaseFuncGUIDelete  ($handleimportbottom)
	$scrolltoppos       = CommonScrollDelete ($handleimportscroll)
	$handleimportgui    = CommonScaleCreate ("GUI", "Select Items For Import" , -1, -1, 104, 104, $WS_EX_STATICEDGE, -1, $edithandlegui)
	$importhelphandle   = CommonScaleCreate ("Button",   "Help", 90,  2,  8, 3.5)
	$handleimportbottom = CommonScaleCreate ("GUI", "", 0, 93, 104, 12, $WS_CHILD, "", $handleimportgui)
	$buttonimportcancel = CommonScaleCreate ("Button",  "Cancel Import",            7, 0, 22, 3.5)
	$buttonimport       = CommonScaleCreate ("Button",  "Import Selected Items",   70, 0, 22, 3.5)
	$handleimportscroll = CommonScaleCreate ("GUI", "", 0, 8, 104, 80, $WS_CHILD, "", $handleimportgui)
	$islimit = Ubound ($importarray)
	Dim $handleimportcheck [$islimit]
	Dim $importstatus      [$islimit]
	;_ArrayDisplay ($linuxpartarray, "Part")
	;_ArrayDisplay ($importarray, "Import")
	For $islinecount = 0 To $islimit - 1
		$isvert     = ($islinecount * 15) + 5
		$isgroup    = $importarray [$islinecount] [$sEntryTitle]
		$isbootdisk = $importarray [$islinecount] [$sBootDisk]
		$isbootarg  = $importarray [$islinecount] [$sRootSearchArg]
		$iskern     = $importarray [$islinecount] [$sKernelName]
		$isinit     = $importarray [$islinecount] [$sInitrdName]
		$isfull     = ""
		$ishandleuuid = ""
		If $isinit <> "" Then $isinit = "      Initrd Name=" & $isinit
		$isparm  = $importarray [$islinecount] [$sBootParm]
		$isbootdisk = "Root " & $isbootdisk
		If StringInStr ($isbootdisk, "LABEL=") Then $importstatus [$islinecount] = CommonGetDisk  ($isbootarg, "LABEL")
		If StringInStr ($isbootdisk, "UUID=")  Then $importstatus [$islinecount] = CommonGetDisk  ($isbootarg, "UUID")
		If StringInstr ($isbootdisk, "g2wprobeuuid") Then
			$importstatus [$islinecount] = ""
			$isbootdisk = "Root Locate By File Search  -  " & $isbootarg
		Else
			$isfull = CommonGetSearch ($importstatus [$islinecount], "FULL")
		EndIf
		$handleimportcheck [$islinecount] = CommonScaleCreate ("CheckBox", "",                        5, $isvert + 1,   3,  3)
		$ishandlegroup                    = CommonScaleCreate ("Group",    $isgroup,                  8, $isvert - 4,  85, 13)
		$isvert -= 3
		If $importtype = "Linux"  Then
			$isvert += 3
			$ishandleuuid =   CommonScaleCreate ("Label",    $isbootdisk & "     " & $isfull, 15, $isvert - 1,   75,  3)
		Else
			GUICtrlSetState   ($handleimportcheck [$islinecount], $GUI_CHECKED)
		EndIf
							  CommonScaleCreate ("Label",    "Kernel Name=" & $iskern & $isinit,           15, $isvert + 1.8, 75,  3)
		If $isparm <> "" Then CommonScaleCreate ("Label",    "Parm="        & $isparm,                     15, $isvert + 4,   70,  4.5)
															 GUICtrlSetBkColor ($ishandlegroup, $myblue)
		If $importstatus [$islinecount] = $partnotfound Then GUICtrlSetBkColor ($ishandleuuid,  $myred)
	Next
	$ismaxvsize = Int ($scalepctvert * ($isvert) + 60)
	CommonScrollGenerate ($handleimportscroll, $scalehsize, $ismaxvsize)
	GUISetBkColor     ($mypurple, $handleimportgui)
	GUICtrlSetState   ($buttonimport, $GUI_FOCUS)
	GUICtrlSetBkColor ($importhelphandle, $mymedblue)
	GUISetBkColor     ($mypurple, $handleimportbottom)
	GUISetBkColor     ($mypurple, $handleimportscroll)
	GUISetState       (@SW_SHOW,  $handleimportgui)
	GUISetState       (@SW_SHOW,  $handleimportscroll)
	GUISetState       (@SW_SHOW,  $handleimportbottom)
EndFunc

Func ImportParseLinux ($plrecord, $plsearch)
	$plout   = "     "
	$plarray = StringSplit ($plrecord, " ")
	If Not @error Then
		For $plsub = 1 To Ubound ($plarray) -1
			$plparm = $plarray [$plsub]
			If StringInStr ($plparm, "root=") Or StringInStr ($plparm, "boot=") Then _
				$plparm = StringLeft ($plparm, 5) & $plsearch
			$plout &= $plparm & "  "
		Next
		;_ArrayDisplay ($plarray, $plout)
	EndIf
	Return $plout
EndFunc

Func ImportParseSearch ($psrecord, ByRef $pslinarg)
	$pslinarg = ""
	$psarray  = StringSplit ($psrecord, " ")
	If @error Then Return ""
	$psfind   = $psarray [UBound ($psarray) - 1]
	$pslinarg = $psfind
	;_ArrayDisplay ($psarray)
	Select
		Case StringInStr ($psrecord, "search.fs_file")  Or StringInStr ($psrecord, " --fs-file ")  Or StringInStr ($psrecord, " -f ")
			$psfind   = "UUID=$g2wprobeuuid "
		Case StringInStr ($psrecord, "search.fs_uuid")  Or StringInStr ($psrecord, " --fs-uuid ")  Or StringInStr ($psrecord, " -u ")
			$psfind   = "UUID="  & $psfind  & " "
		Case StringInStr ($psrecord, "search.fs_label") Or StringInStr ($psrecord, " --fs-label ") Or StringInStr ($psrecord, " -l ")
			$psfind   = "LABEL=" & $psfind  & " "
		Case Else
			$psfind = ""
	EndSelect
	If StringInStr ($psrecord, " --set=") And Not StringInStr ($psrecord, " --set=root ") Then $psfind  = ""
	;MsgBox ($mbontop, "Search", $psrecord & @CR & $psfind & @CR & $pslinarg)
	Return $psfind
EndFunc

Func ImportCheck ()
	$icerror    = ""
	$icselected = ""
	For $icsub = 0 To Ubound ($importarray) - 1
		If Not CommonCheckbox ($handleimportcheck [$icsub]) Then ContinueLoop
		$icselected = "yes"
		If $importtype = "Linux" And $importstatus [$icsub] = $partnotfound Then $icerror = "yes"
		;MsgBox ($mbontop, "Check " & $icsub, $importarray [$icsub] [$sEntryTitle] & @CR & @CR & $importstatus [$icsub] & @CR & @CR & $icerror)
	Next
	If $icerror <> "" Then
		$icwarn  = "You have selected items for import"       & @CR
		$icwarn &= "containing UUID's that are not found"     & @CR
		$icwarn &= "on any of your current disk partitions."  & @CR & @CR
		$icwarn &= "These items probably will not boot."      & @CR & @CR
		$icwarn &= "Do you want to continue with the import anyway?"
		$icrc    = MsgBox ($mbwarnyesno, "** Import Warning **", $icwarn)
		If $icrc = $IDYES Then $icerror = ""
	EndIf
	If $icselected = "" Then
		MsgBox ($mbwarnok, "** Import Warning **", "No items were selected for import" & @CR & @CR & "Check the items you wish to import")
		$icerror = "yes"
	EndIf
	Return $icerror
EndFunc

Func ImportSetRoot (ByRef $srrecord, $srsearch)
	$srarray = StringSplit ($srrecord, " ")
	If @error Then Return
	$srrecwork = "    "
	$srcount   = 0
	For $srsub = 1 To Ubound ($srarray) - 1
		$srparm = $srarray [$srsub]
		If StringLeft ($srparm, 9) = "root=/dev" Or StringLeft ($srrecord, 10) =  "root=LABEL" Then
			$srparm   = "root=" & $srsearch
			$srcount += 1
		EndIf
		$srrecwork &= "  " & $srparm
	Next
	If $srcount > 0 Then $srrecord = $srrecwork
EndFunc

Func ImportApply ()
	For $iasub = 0 To Ubound ($importarray) - 1
		If Not CommonCheckbox ($handleimportcheck [$iasub]) Then ContinueLoop
		ImportGenCode ($iasub)
	Next
	;_ArrayDisplay ($selectionarray, "Sel")
EndFunc

Func ImportGenCode ($gcnumber)
	; _ArrayDisplay ($importarray, "ImportArray")
	;MsgBox ($mbontop, "Apply " & $gcnumber, $importarray [$gcnumber] [$sEntryTitle])
	Dim $gcarray [0]
	$gctitlestart = "Imported-" & StringLeft ($importarray [$gcnumber] [$sEntryTitle], 91)
	$gctitlestart = BaseFuncRemoveCharSpec ($gctitlestart)
	$gctitle      = $gctitlestart
	For $gcdupcount = 1 To 9
		$gccustname = CommonCustomName ($gctitle)
		If Not FileExists ($custconfigstemp & "\" & $gccustname) Then ExitLoop
		If StringLen ($gctitle) > 75 Or StringInStr ($gctitle, "-Dup") Then _
			$gctitle = StringTrimRight (StringLeft ($gctitle, 75), 5)
		$gctitle &= "-Dup" & $gcdupcount
	Next
	$importarray [$gcnumber] [$sEntryTitle] = $gctitle
	_ArrayAdd ($gcarray, "echo")
	_ArrayAdd ($gcarray, "echo Entry   " & $gctitle)
	_ArrayAdd ($gcarray, "echo")
	_ArrayAdd ($gcarray, "echo Imported On  " & TimeLine ())
	_ArrayAdd ($gcarray, 'echo From file    "'  & $importfilepath & '"')
	_ArrayAdd ($gcarray, "echo")
	If $importtype = "Linux" Then
		$gcarg  = $importarray [$gcnumber] [$sRootSearchArg]
		$gctype = "uuid"
		If StringLeft  ($importarray [$gcnumber] [$sBootDisk], 6) = "LABEL=" Then $gctype = "label"
		If StringInStr ($importarray [$gcnumber] [$sBootDisk], "g2wprobeuuid") Then
			_ArrayAdd ($gcarray, "     " & "search -f " & $gcarg & " -s g2wfinder ; probe ($g2wfinder) -u -s g2wprobeuuid")
			$gcarg = "$g2wprobeuuid"
		EndIf
		_ArrayAdd ($gcarray,"     getpartition  " & $gctype & " " & $gcarg & "  root")
		_ArrayAdd ($gcarray,"     g2wsetprefix imported")
	EndIf
	For $gcsub = 0 To Ubound ($importcode) - 1
		If $importcode [$gcsub] [0] <> $gcnumber Then ContinueLoop
		$gccode     = $importcode [$gcsub] [1]
		If $importtype = "Linux" Then
			$gccode = StringStripWS ($gccode, 3)
			If StringLeft ($gccode, 6) = "linux " Or StringLeft ($gccode, 7) = "initrd " Then
				$gccode = StringReplace ($gccode, " /", " $pathprefix/")
				$gccode = StringReplace ($gccode, "/@", "")
			EndIf
			$gccode = "     " & $gccode
		EndIf
		_ArrayAdd ($gcarray, $gccode)
	Next
	_ArrayAdd ($gcarray, "     echo '       ** Ready To Boot **'")
	BaseFuncArrayWrite ($custconfigstemp & "\" & $gccustname, $gcarray, $FO_OVERWRITE, "", 0)
	$importarray [$gcnumber] [$sFamily]      = "custom"
	$importarray [$gcnumber] [$sBootParm]    = $nullparm
	$importarray [$gcnumber] [$sHotKey]      = "no"
	$importarray [$gcnumber] [$sReviewPause] = 2
	$importarray [$gcnumber] [$sSortSeq]     = (Ubound ($selectionarray) * 100) + 10
	$importarray [$gcnumber] [$sAutoUser]    = "auto"
	$importarray [$gcnumber] [$sCustomName]  = $gccustname
	_ArrayAdd ($selectionarray, "")
	$gctargetsub = Ubound ($selectionarray) - 1
		For $gcfield = 1 To $selectionfieldcount - 1
		$selectionarray [$gctargetsub] [$gcfield] = $importarray [$gcnumber] [$gcfield]
	Next
	;_ArrayDisplay ($gcarray, "GC " & $gcnumber & " " & $gccustname)
EndFunc

Func ImportGetFile ()
	If $importtype = "Chrome" Then $importfilepath = FileOpenDialog ("Select Brunch Chrome file to import", "C:\", _
		"Brunch Chrome Config Files (*.txt)|All Files (*.*)", $FD_FILEMUSTEXIST, "chromeos.img.grub.txt")
	If $importtype = "Linux"  Then $importfilepath = FileOpenDialog ("Select a Linux Config file to import", "C:\", _
		"Linux Config Files (*.cfg)", $FD_FILEMUSTEXIST, "linux.grub.cfg")
	If @error Then Return ""
	Return $importfilepath
EndFunc